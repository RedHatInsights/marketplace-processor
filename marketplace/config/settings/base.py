#
# Copyright 2019 Red Hat, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 2.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""
import os

import environ
from boto3.session import Session
from botocore.exceptions import ClientError

from .configurator import ConfigFactory
from .env import ENVIRONMENT

ROOT_DIR = environ.Path(__file__) - 4
APPS_DIR = ROOT_DIR.path("marketplace")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = ENVIRONMENT.get_value("DJANGO_SECRET_KEY", default="base")
DEBUG = ENVIRONMENT.bool("DJANGO_DEBUG", default=False)
ALLOWED_HOSTS = ENVIRONMENT.get_value("DJANGO_ALLOWED_HOSTS", default=["*"])

# this is the time in minutes that we want to wait to retry a report
# default is 8 hours
RETRY_TIME = ENVIRONMENT.get_value("RETRY_TIME", default=480)

# this is the number of retries that we want to allow before failing a report
RETRIES_ALLOWED = ENVIRONMENT.get_value("RETRIES_ALLOWED", default=5)

# this is how long we want to sleep in between looking for reports or slices
# to be processed
NEW_REPORT_QUERY_INTERVAL = ENVIRONMENT.get_value("NEW_REPORT_QUERY_INTERVAL", default=60)

# this is the retention limit of the report & slice archives (in seconds)
# the default is set to 4 weeks
ARCHIVE_RECORD_RETENTION_PERIOD = ENVIRONMENT.get_value("ARCHIVE_RECORD_RETENTION_PERIOD", default=2419200)

# this is the interval at which garbage collection should run (in seconds)
# the default is set to 1 week
GARBAGE_COLLECTION_INTERVAL = ENVIRONMENT.get_value("GARBAGE_COLLECTION_INTERVAL", default=604800)

# Logging
# https://docs.djangoproject.com/en/dev/topics/logging/
# https://docs.python.org/3.6/library/logging.html


configurator = ConfigFactory.get_configurator()

# cloudwatch logging variables
CW_AWS_ACCESS_KEY_ID = configurator.get_cloudwatch_access_id()
CW_AWS_SECRET_ACCESS_KEY = configurator.get_cloudwatch_access_key()
CW_AWS_REGION = configurator.get_cloudwatch_region()
CW_LOG_GROUP = configurator.get_cloudwatch_log_group()
ENABLE_CLOUDWATCH_LOGGING = ENVIRONMENT.bool("ENABLE_CLOUDWATCH_LOGGING", default=True)

# minio variables
MINIO_ENDPOINT = f"{configurator.get_object_store_host()}:{configurator.get_object_store_port()}"
MINIO_ACCESS_KEY = configurator.get_object_store_access_key()
MINIO_SECRET_KEY = configurator.get_object_store_secret_key()
MINIO_SECURE = configurator.get_object_store_tls()
MINIO_BUCKET = configurator.get_object_store_bucket()

LOGGING_LEVEL = os.getenv("DJANGO_LOG_LEVEL", "INFO")
LOGGING_HANDLERS = os.getenv("DJANGO_LOG_HANDLERS", "console").split(",")
LOGGING_FORMATTER = os.getenv("DJANGO_LOG_FORMATTER", "simple")

if CW_AWS_ACCESS_KEY_ID and ENABLE_CLOUDWATCH_LOGGING:
    try:
        POD_NAME = ENVIRONMENT.get_value("APP_POD_NAME", default="local")
        BOTO3_SESSION = Session(
            aws_access_key_id=CW_AWS_ACCESS_KEY_ID,
            aws_secret_access_key=CW_AWS_SECRET_ACCESS_KEY,
            region_name=CW_AWS_REGION,
        )
        watchtower = BOTO3_SESSION.client("logs")  # pylint: disable=invalid-name
        watchtower.create_log_stream(logGroupName=CW_LOG_GROUP, logStreamName=POD_NAME)
        LOGGING_HANDLERS += ["watchtower"]
        WATCHTOWER_HANDLER = {
            "level": LOGGING_LEVEL,
            "class": "watchtower.CloudWatchLogHandler",
            "boto3_client": watchtower,
            "log_group": CW_LOG_GROUP,
            "stream_name": POD_NAME,
            "formatter": LOGGING_FORMATTER,
            "use_queues": False,
            "create_log_group": False,
        }
    except ClientError as client_err:
        if client_err.response.get("Error", {}).get("Code") == "ResourceAlreadyExistsException":
            LOGGING_HANDLERS += ["watchtower"]
            WATCHTOWER_HANDLER = {
                "level": LOGGING_LEVEL,
                "class": "watchtower.CloudWatchLogHandler",
                "boto3_client": watchtower,
                "log_group": CW_LOG_GROUP,
                "stream_name": POD_NAME,
                "formatter": LOGGING_FORMATTER,
                "use_queues": False,
                "create_log_group": False,
            }
        else:
            print("CloudWatch not configured.")

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {"format": "%(asctime)s | %(levelname)s | " "%(filename)s:%(funcName)s:%(lineno)d | %(message)s"},
        "simple": {"format": "[%(asctime)s] %(levelname)s: %(message)s"},
    },
    "handlers": {
        "console": {
            "level": ENVIRONMENT.get_value("DJANGO_CONSOLE_LOG_LEVEL", default="INFO"),
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        }
    },
    "loggers": {"": {"handlers": LOGGING_HANDLERS, "level": LOGGING_LEVEL}},
}

if "watchtower" in LOGGING_HANDLERS:
    LOGGING["handlers"]["watchtower"] = WATCHTOWER_HANDLER
    print("CloudWatch configured.")

# Default apps go here
DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

# Any pip installed apps will go here
THIRD_PARTY_APPS = ["rest_framework", "django_prometheus"]

# Apps specific to this project go here
LOCAL_APPS = ["api"]


INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

MIDDLEWARE = [
    "django_prometheus.middleware.PrometheusBeforeMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django_prometheus.middleware.PrometheusAfterMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ]
        },
    }
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases
ENGINES = {
    "sqlite": "django.db.backends.sqlite3",
    "postgresql": "django.db.backends.postgresql",
    "mysql": "django.db.backends.mysql",
}

SERVICE_NAME = ENVIRONMENT.get_value("DATABASE_SERVICE_NAME", default="").upper().replace("-", "_")
ENGINE = ENGINES.get(ENVIRONMENT.get_value("DATABASE_ENGINE", default="postgresql"), ENGINES["postgresql"])

NAME = configurator.get_database_name()

if not NAME and ENGINE == ENGINES["sqlite"]:
    NAME = os.path.join(APPS_DIR, "db.sqlite3")

DATABASES = {
    "ENGINE": ENGINE,
    "NAME": NAME,
    "USER": configurator.get_database_user(),
    "PASSWORD": configurator.get_database_password(),
    "HOST": configurator.get_database_host(),
    "PORT": configurator.get_database_port(),
}

# add ssl cert if specified
DATABASE_CERT = configurator.get_database_ca()
if DATABASE_CERT:
    CERT_FILE = configurator.get_database_ca_file()
    DB_OPTIONS = {"OPTIONS": {"sslmode": "verify-full", "sslrootcert": CERT_FILE}}
    DATABASES.update(DB_OPTIONS)

DATABASES = {"default": DATABASES}

PROMETHEUS_EXPORT_MIGRATIONS = False

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_L10N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = ENVIRONMENT.get_value("DJANGO_STATIC_URL", default="/static/")
STATIC_ROOT = ENVIRONMENT.get_value("DJANGO_STATIC_ROOT", default=str(APPS_DIR.path("static")))
STATICFILES_DIRS = [os.path.join(APPS_DIR, "static/client")]

# Django Rest Framework
# http://www.django-rest-framework.org/api-guide/settings/

REST_FRAMEWORK = {"DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination", "PAGE_SIZE": 10}

# Insights Kafka messaging address
INSIGHTS_KAFKA_HOST = configurator.get_kafka_broker_host()

# Insights Kafka messaging address
INSIGHTS_KAFKA_PORT = configurator.get_kafka_broker_port()

# Insights Kafka server address
INSIGHTS_KAFKA_ADDRESS = f"{INSIGHTS_KAFKA_HOST}:{INSIGHTS_KAFKA_PORT}"

# Insights Kafka topic
INSIGHTS_KAFKA_TOPIC = configurator.get_kafka_topic()

# Insights Kafka sasl
INSIGHTS_KAFKA_SASL = configurator.get_kafka_sasl()

# Insights Kafka cacert
INSIGHTS_KAFKA_CACERT = configurator.get_kafka_cacert()


if configurator.is_clowder_enabled():
    # Prometheus setup for Clowder
    PROMETHEUS_METRICS_EXPORT_PORT = configurator.get_metrics_port()
    PROMETHEUS_METRICS_EXPORT_ADDRESS = ""  # all addresses

DEFAULT_AUTO_FIELD = "django.db.models.AutoField"
